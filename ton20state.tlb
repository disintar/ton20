// Helpers
bit$_ (## 1) = Bit;
m_edge#_ {n:#} {X:Type} {l:#} {m:#} label:(HmLabel ~l n)
          {n = (~m) + l} node:(HashmapNode m X) = Hashmap n X;

hmn_leaf#_ {X:Type} value:X = HashmapNode 0 X;
hmn_fork#_ {n:#} {X:Type} left:^(Hashmap n X)
           right:^(Hashmap n X) = HashmapNode (n + 1) X;

hml_short$0 {m:#} {n:#} len:(Unary ~n) {n <= m} s:(n * Bit) = HmLabel ~n m;
hml_long$10 {m:#} n:(#<= m) s:(n * Bit) = HmLabel ~n m;
hml_same$11 {m:#} v:Bit n:(#<= m) = HmLabel ~n m;

unary_zero$0 = Unary ~0;
unary_succ$1 {n:#} x:(Unary ~n) = Unary ~(n + 1);

hme_empty$0 {n:#} {X:Type} = HashmapE n X;
hme_root$1 {n:#} {X:Type} root:^(Hashmap n X) = HashmapE n X;

nothing$0 {X:Type} = Maybe X;
just$1 {X:Type} value:X = Maybe X;

anycast_info$_ depth:(#<= 30) { depth >= 1 }
   rewrite_pfx:(bits depth) = Anycast;
addr_std$10 anycast:(Maybe Anycast)
   workchain_id:int8 address:bits256  = MsgAddressInt;


// State:

walletinfo$_ amount:uint256 last_txhash:bits256 = WalletInfo;

tickinfo$000 max:uint256 lim:uint256 rest:uint256
            ^[deploy_by:MsgAddressInt deploy_txhash:bits256]
            wallets:(HashmapE 264 WalletInfo) = TickInfo; // wallets key - wc:uint8 address:bits256

ton20state#64746f6e last_tx_hash:uint256 last_tx_lt:uint64 master_ref_seqno:uint32
                ticks:(HashmapE 256 TickInfo) = Ton20State; // ticks key - utf8 encoded tick

